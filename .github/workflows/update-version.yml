name: Update version.json on Release

on:
  release:
    types: [published]

jobs:
  update-version:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.2.1
      with:
        # Ensure the main branch is checked out, not just the release state
        ref: main
        ssh-key: ${{ secrets.DEPLOY_KEY }}
    
    - name: Get Release Assets
      id: get_release_assets
      run: |
        # Get the release data using GitHub API
        curl -sL \
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/ethan-hann/CyberRadio-Assistant/releases/tags/${{ github.event.release.tag_name }} > release_info.json

        # Extract the URL of the asset that matches the .exe file
        ASSET_URL=$(jq -r '.assets[] | select(.name == "CyberRadioAssistant.exe") | .browser_download_url' release_info.json)

        # Fail the build if the asset URL isn't found
        if [ -z "$ASSET_URL" ]; then
          echo "No .exe asset found in the release."
          exit 1
        fi

        # Store the asset URL as an output of this step
        echo "::set-output name=exe_url::$ASSET_URL"

    - name: Update version.json
      env:
        version: ${{ github.event.release.tag_name }}
        url: ${{ steps.get_release_assets.outputs.exe_url }}
      run: 'echo "{\"version\": \"${VERSION}\", \"url\": \"${URL}\"}" > version.json'

    - name: Commit and push changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add version.json
        git commit -m "Update version.json for release ${{ github.event.release.tag_name }}"
        git push origin main
